Index: dcraw/dcraw.c
===================================================================
--- dcraw.orig/dcraw.c	2014-07-06 20:38:46.637060946 +0900
+++ dcraw/dcraw.c	2014-07-06 20:39:45.879650998 +0900
@@ -1,4 +1,8 @@
 /*
+ * OpenMP multithread version of dcraw
+ * based on UFRaw dcraw_indi.c by Udi Fuchs
+ */
+/*
    dcraw.c -- Dave Coffin's raw photo decoder
    Copyright 1997-2014 by Dave Coffin, dcoffin a cybercom o net
 
@@ -105,6 +109,15 @@
 #define ushort unsigned short
 #endif
 
+#ifdef _OPENMP
+#include <omp.h>
+#define uf_omp_get_thread_num() omp_get_thread_num()
+#define uf_omp_get_num_threads() omp_get_num_threads()
+#else
+#define uf_omp_get_thread_num() 0
+#define uf_omp_get_num_threads() 1
+#endif
+
 /*
    All global variables are defined here, and all functions that
    access them are prefixed with "CLASS".  Note that a thread-safe
@@ -3948,6 +3961,19 @@
   merror (fimg, "wavelet_denoise()");
   temp = fimg + size*3;
   if ((nc = colors) == 3 && filters) nc++;
+#ifdef _OPENMP
+#if defined(__sun) && !defined(__GNUC__)	/* Fix UFRaw bug #3205673 - NKBJ */
+    #pragma omp parallel for				\
+    default(none)					\
+    shared(nc,image,scale,size,noise)				\
+    private(c,i,hpass,lev,lpass,row,col,thold,fimg,temp)
+#else
+    #pragma omp parallel for				\
+    default(none)					\
+    shared(nc,image,iheight,iwidth,scale,threshold,size)				\
+    private(c,i,hpass,lev,lpass,row,col,thold,fimg,temp)
+#endif
+#endif
   FORC(nc) {			/* denoise R,G1,B,G3 individually */
     for (i=0; i < size; i++)
       fimg[i] = 256 * sqrt(image[i][c] << scale);
@@ -4173,6 +4199,9 @@
 {
   unsigned row, col, y, x, f, c, sum[8];
 
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=0; row < height; row++)
     for (col=0; col < width; col++) {
       if (col==border && row >= border && row < height-border)
@@ -4199,7 +4228,15 @@
 
   if (verbose) fprintf (stderr,_("Bilinear interpolation...\n"));
   if (filters == 9) size = 6;
+#ifdef _OPENMP
+    #pragma omp parallel default(shared) \
+    private(ip, sum, f, c, i, x, y, row, col, shift, color, pix)
+#endif
+{
   border_interpolate(1);
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=0; row < size; row++)
     for (col=0; col < size; col++) {
       ip = code[row][col]+1;
@@ -4222,6 +4259,9 @@
 	  *ip++ = 256 / sum[c];
 	}
     }
+#ifdef _OPENMP
+    #pragma omp for
+#endif
   for (row=1; row < height-1; row++)
     for (col=1; col < width-1; col++) {
       pix = image[row*width+col];
@@ -4232,6 +4272,7 @@
       for (i=colors; --i; ip+=2)
 	pix[ip[0]] = sum[ip[0]] * ip[1] >> 8;
     }
+} /* pragma omp parallel */
 }
 
 /*
@@ -4275,6 +4316,7 @@
   int row, col, x, y, x1, x2, y1, y2, t, weight, grads, color, diag;
   int g, diff, thold, num, c;
 
+
   lin_interpolate();
   if (verbose) fprintf (stderr,_("VNG interpolation...\n"));
 
@@ -4380,10 +4422,20 @@
   int row, col, diff[2], guess[2], c, d, i;
   ushort (*pix)[4];
 
-  border_interpolate(3);
   if (verbose) fprintf (stderr,_("PPG interpolation...\n"));
 
+#ifdef _OPENMP
+    #pragma omp parallel				\
+    default(none)					\
+    shared(image,dir,diff,width,height,filters)				\
+    private(row,col,i,d,c,pix,guess)
+#endif
+{
+  border_interpolate(3);
 /*  Fill in the green layer with gradients and pattern recognition: */
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=3; row < height-3; row++)
     for (col=3+(FC(row,3) & 1), c=FC(row,col); col < width-3; col+=2) {
       pix = image + row*width+col;
@@ -4400,6 +4452,9 @@
       pix[0][1] = ULIM(guess[i] >> 2, pix[d][1], pix[-d][1]);
     }
 /*  Calculate red and blue for each green pixel:		*/
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=1; row < height-1; row++)
     for (col=1+(FC(row,2) & 1), c=FC(row,col+1); col < width-1; col+=2) {
       pix = image + row*width+col;
@@ -4408,6 +4463,9 @@
 			- pix[-d][1] - pix[d][1]) >> 1);
     }
 /*  Calculate blue for red pixels and vice versa:		*/
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=1; row < height-1; row++)
     for (col=1+(FC(row,1) & 1), c=2-FC(row,col); col < width-1; col+=2) {
       pix = image + row*width+col;
@@ -4423,6 +4481,7 @@
       else
 	pix[0][c] = CLIP((guess[0]+guess[1]) >> 2);
     }
+} /* pragma omp parallel */
 }
 
 void CLASS cielab (ushort rgb[3], short lab[3])
@@ -4432,13 +4491,22 @@
   static float cbrt[0x10000], xyz_cam[3][4];
 
   if (!rgb) {
+#ifdef _OPENMP
+        #pragma omp for
+#endif
     for (i=0; i < 0x10000; i++) {
       r = i / 65535.0;
       cbrt[i] = r > 0.008856 ? pow(r,1/3.0) : 7.787*r + 16/116.0;
     }
+#ifdef _OPENMP
+        #pragma omp for
+#endif
     for (i=0; i < 3; i++)
       for (j=0; j < colors; j++)
 	for (xyz_cam[i][j] = k=0; k < 3; k++)
+#ifdef _OPENMP
+        #pragma omp atomic
+#endif
 	  xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];
     return;
   }
@@ -4699,6 +4767,12 @@
 
   if (verbose) fprintf (stderr,_("AHD interpolation...\n"));
 
+#ifdef _OPENMP
+    #pragma omp parallel				\
+    default(shared)					\
+    private(top, left, row, col, pix, rix, lix, c, val, d, tc, tr, i, j, ldiff, abdiff, leps, abeps, hm, buffer, rgb, lab, homo)
+#endif
+{
   cielab (0,0);
   border_interpolate(5);
   buffer = (char *) malloc (26*TS*TS);
@@ -4707,6 +4781,9 @@
   lab  = (short (*)[TS][TS][3])(buffer + 12*TS*TS);
   homo = (char  (*)[TS][TS])   (buffer + 24*TS*TS);
 
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (top=2; top < height-5; top += TS-6)
     for (left=2; left < width-5; left += TS-6) {
 
@@ -4789,6 +4866,7 @@
       }
     }
   free (buffer);
+} /* pragma omp parallel */
 }
 #undef TS
 
@@ -9102,6 +9180,9 @@
   img = (ushort (*)[4]) calloc (high, wide*sizeof *img);
   merror (img, "fuji_rotate()");
 
+#ifdef _OPENMP
+    #pragma omp parallel for default(shared) private(row,col,ur,uc,r,c,fr,fc,pix,i)
+#endif
   for (row=0; row < high; row++)
     for (col=0; col < wide; col++) {
       ur = r = fuji_width + (row-col)*step;
