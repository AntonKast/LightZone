Index: dcraw/dcraw_lz.c
===================================================================
--- dcraw.orig/dcraw_lz.c	2015-09-22 10:48:35.845246376 +0900
+++ dcraw/dcraw_lz.c	2015-09-22 10:48:35.837247084 +0900
@@ -4665,6 +4665,45 @@
 } /* pragma omp parallel */
 }
 
+void CLASS cielab3 (ushort rgb[3], short lab[3])
+{
+  int c, i, j, k;
+  float r, xyz[3];
+  static float cbrt[0x10000], xyz_cam[3][4];
+
+  if (!rgb) {
+#ifdef _OPENMP
+        #pragma omp for
+#endif
+    for (i=0; i < 0x10000; i++) {
+      r = i / 65535.0;
+      cbrt[i] = r > 0.008856 ? pow(r,1/3.0) : 7.787*r + 16/116.0;
+    }
+#ifdef _OPENMP
+        #pragma omp for
+#endif
+    for (i=0; i < 3; i++)
+      for (j=0; j < colors; j++)
+	for (xyz_cam[i][j] = k=0; k < 3; k++)
+#ifdef _OPENMP
+        #pragma omp atomic
+#endif
+	  xyz_cam[i][j] += xyz_rgb[i][k] * rgb_cam[k][j] / d65_white[i];
+    return;
+  }
+  xyz[0] = xyz[1] = xyz[2] = 0.5;
+
+  FORC(3) {
+    xyz[c] += xyz_cam[c][0] * rgb [0] + xyz_cam[c][1] * rgb [1] + xyz_cam[c][2] * rgb [2];
+  }
+  xyz[0] = cbrt[CLIP((int) xyz[0])];
+  xyz[1] = cbrt[CLIP((int) xyz[1])];
+  xyz[2] = cbrt[CLIP((int) xyz[2])];
+  lab[0] = 64 * (116 * xyz[1] - 16);
+  lab[1] = 64 * 500 * (xyz[0] - xyz[1]);
+  lab[2] = 64 * 200 * (xyz[1] - xyz[2]);
+}
+
 void CLASS cielab (ushort rgb[3], short lab[3])
 {
   int c, i, j, k;
@@ -4708,13 +4747,38 @@
 #define TS 512		/* Tile Size */
 #define fcol(row,col) xtrans[(row+6) % 6][(col+6) % 6]
 
+#if ! defined(_OPENMP)
+// Makes a 10% difference in performances in sequential version, but none at all with OPENMP...
+// And _STATIC_BUFFER is delicate to manage
+#define _STATIC_BUFFER
+#define _FIXED_NDIR
+#endif
+
+/* Allow each tile to be calculate independently from the others
+   Explanation: the border pixels from each tiles start from the border pixel of other tiles
+   This goes from top to bottom:
+   - the first pixels of each tile depend on the last ones of the previous tile
+   - the last ones depend on the first ones of the next tile
+   In sequential mode, the first pixels use the calculated values from the previous tiles and fresh values from the next tile.
+   In OpenMP / parallel mode, the first pixels of the next files might have been already calculated.
+   The STRIC_IMAGE makes it possible to use indeed fresh values, always
+*/
+#define _STRICT_IMAGE
+
 /*
    Frank Markesteijn's algorithm for Fuji X-Trans sensors
  */
 void CLASS xtrans_interpolate (int passes)
 {
   int c, d, f, g, h, i, v, ng, row, col, top, left, mrow, mcol;
-  int val, ndir, pass, hm[8], avg[4], color[3][8];
+  // int val, ndir, pass, hm[8], avg[4], color[3][8];
+  int val, pass, hm[8], avg[4], color[3][8];
+#if defined(_FIXED_NDIR)
+  const int ndir = 4 << 1;
+#else
+  int ndir = 4 << (passes > 1);
+#endif
+
   static const short orth[12] = { 1,0,0,1,-1,0,0,-1,1,0,0,1 },
 	patt[2][16] = { { 0,1,0,-1,2,0,-1,0,1,1,1,-1,0,0,0,0 },
 			{ 0,1,0,-2,1,0,-2,0,1,1,-2,-2,1,-1,-1,1 } },
@@ -4724,12 +4788,43 @@
   ushort (*rgb)[TS][TS][3], (*rix)[3], (*pix)[4];
    short (*lab)    [TS][3], (*lix)[3];
    float (*drv)[TS][TS], diff[6], tr;
-   char (*homo)[TS][TS], *buffer;
+   char (*homo)[TS][TS];
+#if defined(_STATIC_BUFFER)
+   static char buffer [TS*TS*(8*11+6)] __attribute__((aligned(64)));
+#else
+   char *buffer;
+#endif
 
   if (verbose)
+#if defined(_OPENMP)
+    fprintf (stderr,_("%d-pass X-Trans interpolation with %d max threads...\n"),
+	     passes, omp_get_max_threads ());
+#else
     fprintf (stderr,_("%d-pass X-Trans interpolation...\n"), passes);
+#endif
 
-  cielab (0,0);
+  if ((4 << (passes > 1)) != ndir)
+    fprintf (stderr,_("4 << (passes > 1) = %d != ndir = %d\n"),
+	     (4 << (passes > 1)), ndir);
+
+#ifdef _FIXED_NDIR
+#pragma omp parallel default (none)			\
+  shared (height, width, image, allhex, sgrow, sgcol, xtrans, \
+	  top_margin, left_margin, passes, verbose, iwidth, iheight) \
+  private (top, left, mrow, mcol, row, col, color, pix, hex, c, pass, rix, \
+	   val, h, f, d, g, tr, v, hm, max, avg, lix, diff, i, \
+	   buffer, rgb, lab, drv, homo, ng, min)
+#else
+#pragma omp parallel default (none)			\
+  shared (height, width, image, allhex, ndir, sgrow, sgcol, xtrans, \
+	  top_margin, left_margin, passes, verbose, iwidth, iheight) \
+  private (top, left, mrow, mcol, row, col, color, pix, hex, c, pass, rix, \
+	   val, h, f, d, g, tr, v, hm, max, avg, lix, diff, i, \
+	   buffer, rgb, lab, drv, homo, ng, min)
+#endif
+  {
+  cielab3 (0,0);
+  border_interpolate(6);
   ndir = 4 << (passes > 1);
   buffer = (char *) malloc (TS*TS*(ndir*11+6));
   merror (buffer, "xtrans_interpolate()");
@@ -4739,6 +4834,9 @@
   homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));
 
 /* Map a green hexagon around each non-green pixel and vice versa:	*/
+#ifdef _OPENMP
+        #pragma omp for
+#endif
   for (row=0; row < 3; row++)
     for (col=0; col < 3; col++)
       for (ng=d=0; d < 10; d+=2) {
@@ -4753,7 +4851,11 @@
 	}
       }
 
+
 /* Set green1 and green3 to the minimum and maximum allowed values:	*/
+#ifdef _OPENMP
+        #pragma omp single
+#endif
   for (row=2; row < height-2; row++)
     for (min=~(max=0), col=2; col < width-2; col++) {
       if (fcol(row,col) == 1 && (min=~(max=0))) continue;
@@ -4772,20 +4874,46 @@
       }
     }
 
+#if defined(_STRICT_IMAGE)
+  ushort (*working_image)[4];
+  working_image = (ushort (*)[4]) calloc (iheight, iwidth*sizeof *image);
+  memcpy (working_image, image, iheight * iwidth * sizeof *image);
+  merror (working_image, "xtrans_interpolate working_image");
+#endif
+
+#if ! defined(_STATIC_BUFFER)
+  buffer = (char *) malloc (TS*TS*(ndir*11+6));
+  merror (buffer, "xtrans_interpolate()");
+#endif
+
+  rgb  = (ushort(*)[TS][TS][3]) buffer;
+  lab  = (short (*)    [TS][3])(buffer + TS*TS*(ndir*6));
+  drv  = (float (*)[TS][TS])   (buffer + TS*TS*(ndir*6+6));
+  homo = (char  (*)[TS][TS])   (buffer + TS*TS*(ndir*10+6));
+
+#pragma omp for
   for (top=3; top < height-19; top += TS-16)
     for (left=3; left < width-19; left += TS-16) {
       mrow = MIN (top+TS, height-3);
       mcol = MIN (left+TS, width-3);
       for (row=top; row < mrow; row++)
 	for (col=left; col < mcol; col++)
-	  memcpy (rgb[0][row-top][col-left], image[row*width+col], 6);
+#if defined(_STRICT_IMAGE)
+	  memcpy (rgb[0][row-top][col-left], working_image[row*width+col], 6);
+#else
+          memcpy (rgb[0][row-top][col-left], image[row*width+col], 6);
+#endif
       FORC3 memcpy (rgb[c+1], rgb[0], sizeof *rgb);
 
 /* Interpolate green horizontally, vertically, and along both diagonals: */
       for (row=top; row < mrow; row++)
 	for (col=left; col < mcol; col++) {
 	  if ((f = fcol(row,col)) == 1) continue;
+#if defined(_STRICT_IMAGE)
+	  pix = working_image + row*width + col;
+#else
 	  pix = image + row*width + col;
+#endif
 	  hex = allhex[row % 3][col % 3][0];
 	  color[1][0] = 174 * (pix[  hex[1]][1] + pix[  hex[0]][1]) -
 			 46 * (pix[2*hex[1]][1] + pix[2*hex[0]][1]);
@@ -4807,7 +4935,11 @@
 	  for (row=top+2; row < mrow-2; row++)
 	    for (col=left+2; col < mcol-2; col++) {
 	      if ((f = fcol(row,col)) == 1) continue;
+#if defined(_STRICT_IMAGE)
+	      pix = working_image + row*width + col;
+#else
 	      pix = image + row*width + col;
+#endif
 	      hex = allhex[row % 3][col % 3][1];
 	      for (d=3; d < 6; d++) {
 		rix = &rgb[(d-2)^!((row-sgrow) % 3)][row-top][col-left];
@@ -4883,8 +5015,9 @@
       for (d=0; d < ndir; d++) {
 	for (row=2; row < mrow-2; row++)
 	  for (col=2; col < mcol-2; col++)
-	    cielab (rgb[d][row][col], lab[row][col]);
-	for (f=dir[d & 3],row=3; row < mrow-3; row++)
+	    cielab3 (rgb[d][row][col], lab[row][col]); // use cielab3 because X-trans is 3 colors
+	f=dir[d & 3];
+	for (row=3; row < mrow-3; row++)
 	  for (col=3; col < mcol-3; col++) {
 	    lix = &lab[row][col];
 	    g = 2*lix[0][0] - lix[f][0] - lix[-f][0];
@@ -4899,14 +5032,12 @@
       for (row=4; row < mrow-4; row++)
 	for (col=4; col < mcol-4; col++) {
 	  for (tr=FLT_MAX, d=0; d < ndir; d++)
-	    if (tr > drv[d][row][col])
-		tr = drv[d][row][col];
+	    tr = MIN(tr, (drv[d][row][col]));
 	  tr *= 8;
 	  for (d=0; d < ndir; d++)
 	    for (v=-1; v <= 1; v++)
 	      for (h=-1; h <= 1; h++)
-		if (drv[d][row+v][col+h] <= tr)
-		  homo[d][row][col]++;
+		homo[d][row][col] += (drv[d][row+v][col+h] <= tr);
 	}
 
 /* Average the most homogenous pixels for the final result:	*/
@@ -4916,8 +5047,17 @@
 	for (col = MIN(left,8); col < mcol-8; col++) {
 	  for (d=0; d < ndir; d++)
 	    for (hm[d]=0, v=-2; v <= 2; v++)
-	      for (h=-2; h <= 2; h++)
+	      /*
+		for (h=-2; h <= 2; h++)
 		hm[d] += homo[d][row+v][col+h];
+	      */
+	      /* */
+	      hm[d] += homo[d][row+v][col-2] +
+		homo[d][row+v][col-1] +
+		homo[d][row+v][col+0] +
+		homo[d][row+v][col+1] +
+		homo[d][row+v][col+2];
+	  /* */
 	  for (d=0; d < ndir-4; d++)
 	    if (hm[d] < hm[d+4]) hm[d  ] = 0; else
 	    if (hm[d] > hm[d+4]) hm[d+4] = 0;
@@ -4927,14 +5067,20 @@
 	  memset (avg, 0, sizeof avg);
 	  for (d=0; d < ndir; d++)
 	    if (hm[d] >= max) {
-	      FORC3 avg[c] += rgb[d][row][col][c];
+	      FORC3 {
+#pragma omp atomic
+            avg[c] += rgb[d][row][col][c];
+	      }
 	      avg[3]++;
 	    }
 	  FORC3 image[(row+top)*width+col+left][c] = avg[c]/avg[3];
 	}
     }
+#if ! defined(_STATIC_BUFFER)
   free(buffer);
+#endif
   border_interpolate(8);
+  } /* pragma omp parallel */
 }
 #undef fcol
 
